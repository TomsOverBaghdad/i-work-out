{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SubMenu","Menu","Header","Layout","Content","Footer","Sider","App","Fragment","style","minHeight","className","theme","mode","defaultSelectedKeys","Item","key","padding","width","defaultOpenKeys","height","icon","UserOutlined","title","LaptopOutlined","NotificationOutlined","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNAkFQA,G,MAAYC,IAAZD,SACAE,EAAmCC,IAAnCD,OAAQE,EAA2BD,IAA3BC,QAASC,EAAkBF,IAAlBE,OAAQC,EAAUH,IAAVG,MAuDlBC,EArDH,kBACV,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAQC,MAAO,CAAEC,UAAW,UAC1B,kBAACR,EAAD,CAAQS,UAAU,UAChB,yBAAKA,UAAU,SACf,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,MACzD,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KAAf,SACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,SACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,WAGJ,kBAACZ,EAAD,CAASK,MAAO,CAAEQ,QAAS,SAMzB,kBAAC,IAAD,CAAQN,UAAU,yBAAyBF,MAAO,CAAEQ,QAAS,WAC3D,kBAACX,EAAD,CAAOK,UAAU,yBAAyBO,MAAO,KAC/C,kBAAC,IAAD,CACEL,KAAK,SACLC,oBAAqB,CAAC,KACtBK,gBAAiB,CAAC,QAClBV,MAAO,CAAEW,OAAQ,SAEjB,kBAACpB,EAAD,CAASgB,IAAI,OAAOK,KAAM,kBAACC,EAAA,EAAD,MAAkBC,MAAM,YAChD,kBAAC,IAAKR,KAAN,CAAWC,IAAI,KAAf,WACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,WACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,WACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,YAEF,kBAAChB,EAAD,CAASgB,IAAI,OAAOK,KAAM,kBAACG,EAAA,EAAD,MAAoBD,MAAM,YAClD,kBAAC,IAAKR,KAAN,CAAWC,IAAI,KAAf,WACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,WACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,WACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,YAEF,kBAAChB,EAAD,CAASgB,IAAI,OAAOK,KAAM,kBAACI,EAAA,EAAD,MAA0BF,MAAM,YACxD,kBAAC,IAAKR,KAAN,CAAWC,IAAI,KAAf,WACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,MAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,MAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,MAAf,eAIN,kBAACZ,EAAD,CAASK,MAAO,CAAEQ,QAAS,SAAUP,UAAW,MAAhD,aAGJ,kBAACL,EAAD,CAAQI,MAAO,CAAEiB,UAAW,WAA5B,6CCzHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4b5357bd.chunk.js","sourcesContent":["import React from 'react';\n// import {\n//   Form,\n//   Select,\n//   InputNumber,\n//   DatePicker,\n//   Switch,\n//   Slider,\n//   Button,\n//   Rate,\n//   Typography,\n//   Space,\n//   Divider,\n// } from 'antd';\n\n// const { Option } = Select;\n// const { Title } = Typography;\n\n// const App = () => (\n//   <React.Fragment>\n//     <section style={{ textAlign: 'center', marginTop: 48, marginBottom: 40 }}>\n//       <Space align=\"start\">\n//         <img\n//           style={{width: 40, height: 40 }}\n//           src=\"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\"\n//           alt=\"Ant Design\"\n//         />\n//         <Title level={2} style={{ marginBottom: 0 }}>\n//           \bAnt Design\n//         </Title>\n//       </Space>\n//     </section>\n//     <Divider style={{ marginBottom: 60 }}>Form</Divider>\n//     <Form labelCol={{ span: 8 }} wrapperCol={{ span: 8 }}>\n//       <Form.Item label=\"数字输入框\">\n//         <InputNumber min={1} max={10} defaultValue={3} />\n//         <span className=\"ant-form-text\"> 台机器</span>\n//         <a href=\"https://ant.design\">链接文字</a>\n//       </Form.Item>\n//       <Form.Item label=\"开关\">\n//         <Switch defaultChecked />\n//       </Form.Item>\n//       <Form.Item label=\"滑动输入条\">\n//         <Slider defaultValue={70} />\n//       </Form.Item>\n//       <Form.Item label=\"选择器\">\n//         <Select defaultValue=\"lucy\" style={{ width: 192 }}>\n//           <Option value=\"jack\">jack</Option>\n//           <Option value=\"lucy\">lucy</Option>\n//           <Option value=\"disabled\" disabled>disabled</Option>\n//           <Option value=\"yiminghe\">yiminghe</Option>\n//         </Select>\n//       </Form.Item>\n//       <Form.Item label=\"日期选择框\">\n//         <DatePicker />\n//       </Form.Item>\n//       <Form.Item label=\"日期范围选择框\">\n//         <DatePicker.RangePicker />\n//       </Form.Item>\n//       <Form.Item label=\"评分\">\n//         <Rate defaultValue={5} />\n//       </Form.Item>\n//       <Form.Item wrapperCol={{ span: 8, offset: 8 }}>\n//         <Space>\n//           <Button type=\"primary\" htmlType=\"submit\">\n//             Submit\n//           </Button>\n//           <Button>\n//             Cancel\n//           </Button>\n//         </Space>\n//       </Form.Item>\n//     </Form>\n//   </React.Fragment>\n// );\n\n\n\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport './App.less';\n\nconst { SubMenu } = Menu;\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst App = () => (\n  <React.Fragment>\n    <Layout style={{ minHeight: '100vh' }}>\n      <Header className=\"header\">\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n          <Menu.Item key=\"1\">nav 1</Menu.Item>\n          <Menu.Item key=\"2\">nav 2</Menu.Item>\n          <Menu.Item key=\"3\">nav 3</Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '50px' }}>\n        {/*<Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>List</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>*/}\n        <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n          <Sider className=\"site-layout-background\" width={200}>\n            <Menu\n              mode=\"inline\"\n              defaultSelectedKeys={['1']}\n              defaultOpenKeys={['sub1']}\n              style={{ height: '100%' }}\n            >\n              <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"subnav 1\">\n                <Menu.Item key=\"1\">option1</Menu.Item>\n                <Menu.Item key=\"2\">option2</Menu.Item>\n                <Menu.Item key=\"3\">option3</Menu.Item>\n                <Menu.Item key=\"4\">option4</Menu.Item>\n              </SubMenu>\n              <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"subnav 2\">\n                <Menu.Item key=\"5\">option5</Menu.Item>\n                <Menu.Item key=\"6\">option6</Menu.Item>\n                <Menu.Item key=\"7\">option7</Menu.Item>\n                <Menu.Item key=\"8\">option8</Menu.Item>\n              </SubMenu>\n              <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"subnav 3\">\n                <Menu.Item key=\"9\">option9</Menu.Item>\n                <Menu.Item key=\"10\">option10</Menu.Item>\n                <Menu.Item key=\"11\">option11</Menu.Item>\n                <Menu.Item key=\"12\">option12</Menu.Item>\n              </SubMenu>\n            </Menu>\n          </Sider>\n          <Content style={{ padding: '0 24px', minHeight: 280 }}>Content</Content>\n        </Layout>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n  </React.Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}